import{_ as s,W as n,X as a,a1 as e}from"./framework-b2028a60.js";const p={},t=e(`<h1 id="修改app-xaml和app-xaml-cs这2个文件" tabindex="-1"><a class="header-anchor" href="#修改app-xaml和app-xaml-cs这2个文件" aria-hidden="true">#</a> 修改App.xaml和App.xaml.cs这2个文件</h1><h2 id="修改app-xaml" tabindex="-1"><a class="header-anchor" href="#修改app-xaml" aria-hidden="true">#</a> 修改App.xaml</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token operator">&lt;</span>Theme<span class="token punctuation">:</span><span class="token class-name">VampirewalApplication</span>
    x<span class="token punctuation">:</span>Class<span class="token operator">=</span><span class="token string">&quot;test.App&quot;</span>
    xmlns<span class="token operator">=</span><span class="token string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span>
    xmlns<span class="token punctuation">:</span>x<span class="token operator">=</span><span class="token string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span>
    xmlns<span class="token punctuation">:</span>Theme<span class="token operator">=</span><span class="token string">&quot;https://vampirewal.gitee.io/&quot;</span>
    xmlns<span class="token punctuation">:</span>local<span class="token operator">=</span><span class="token string">&quot;clr-namespace:test&quot;</span>
    xmlns<span class="token punctuation">:</span>vm<span class="token operator">=</span><span class="token string">&quot;clr-namespace:test.ViewModel;assembly=test.ViewModel&quot;</span>
    ShutdownMode<span class="token operator">=</span><span class="token string">&quot;OnLastWindowClose&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>Theme<span class="token punctuation">:</span>VampirewalApplication<span class="token punctuation">.</span>Resources<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>ResourceDictionary<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>ResourceDictionary<span class="token punctuation">.</span>MergedDictionaries<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入本框架的主题样式包<span class="token operator">--</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token class-name">ResourceDictionary</span> Source<span class="token operator">=</span><span class="token string">&quot;pack://application:,,,/Vampirewal.Core.WPF.Theme;component/Theme.xaml&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入HandyControl控件，这个看每个人需求，其他样式也都行<span class="token operator">--</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token class-name">ResourceDictionary</span> Source<span class="token operator">=</span><span class="token string">&quot;pack://application:,,,/HandyControl;component/Themes/SkinDefault.xaml&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token class-name">ResourceDictionary</span> Source<span class="token operator">=</span><span class="token string">&quot;pack://application:,,,/HandyControl;component/Themes/Theme.xaml&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>                
            <span class="token operator">&lt;</span><span class="token operator">/</span>ResourceDictionary<span class="token punctuation">.</span>MergedDictionaries<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>ResourceDictionary<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Theme<span class="token punctuation">:</span>VampirewalApplication<span class="token punctuation">.</span>Resources<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Theme<span class="token punctuation">:</span>VampirewalApplication<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修改app-xaml-cs" tabindex="-1"><a class="header-anchor" href="#修改app-xaml-cs" aria-hidden="true">#</a> 修改App.xaml.cs</h2><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">VampirewalApplication</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnStartup</span><span class="token punctuation">(</span><span class="token class-name">StartupEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnStartup</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">GlobalExceptions</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span> <span class="token class-name">DispatcherUnhandledExceptionEventArgs</span> e<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span>Handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name">Type</span> <span class="token function">BootStartUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">TestBootStartUp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[t];function c(l,r){return n(),a("div",null,o)}const u=s(p,[["render",c],["__file","Step1.html.vue"]]);export{u as default};
